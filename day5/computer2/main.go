package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

const (
	positionMode = 0
	immediateMode = 1

	add = 1
	mul = 2
	read = 3
	output = 4
	jumpIfTrue = 5
	jumpIfFalse = 6
	lessThan = 7
	equals = 8

	cancel = 99
)

var ip = 0
//var mem = []int{3,225,1,225,6,6,1100,1,238,225,104,0,1102,67,92,225,1101,14,84,225,1002,217,69,224,101,-5175,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1,214,95,224,101,-127,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1101,8,41,225,2,17,91,224,1001,224,-518,224,4,224,1002,223,8,223,101,2,224,224,1,223,224,223,1101,37,27,225,1101,61,11,225,101,44,66,224,101,-85,224,224,4,224,1002,223,8,223,101,6,224,224,1,224,223,223,1102,7,32,224,101,-224,224,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,1001,14,82,224,101,-174,224,224,4,224,102,8,223,223,101,7,224,224,1,223,224,223,102,65,210,224,101,-5525,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,81,9,224,101,-90,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1101,71,85,225,1102,61,66,225,1102,75,53,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,8,226,226,224,102,2,223,223,1005,224,329,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,344,101,1,223,223,1007,226,677,224,102,2,223,223,1005,224,359,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,374,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,389,1001,223,1,223,108,226,677,224,102,2,223,223,1006,224,404,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,419,101,1,223,223,1008,677,677,224,102,2,223,223,1005,224,434,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,449,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,464,1001,223,1,223,107,226,677,224,1002,223,2,223,1006,224,479,1001,223,1,223,107,677,677,224,102,2,223,223,1005,224,494,1001,223,1,223,1008,226,677,224,102,2,223,223,1006,224,509,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,524,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,569,1001,223,1,223,7,226,677,224,102,2,223,223,1006,224,584,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,599,101,1,223,223,1107,677,677,224,1002,223,2,223,1005,224,614,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,629,1001,223,1,223,7,226,226,224,1002,223,2,223,1006,224,644,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,659,101,1,223,223,1107,226,677,224,1002,223,2,223,1006,224,674,101,1,223,223,4,223,99,226}
//var mem = []int{3,4}
//var mem = []int{1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,6,19,1,19,6,23,2,23,6,27,2,6,27,31,2,13,31,35,1,9,35,39,2,10,39,43,1,6,43,47,1,13,47,51,2,6,51,55,2,55,6,59,1,59,5,63,2,9,63,67,1,5,67,71,2,10,71,75,1,6,75,79,1,79,5,83,2,83,10,87,1,9,87,91,1,5,91,95,1,95,6,99,2,10,99,103,1,5,103,107,1,107,6,111,1,5,111,115,2,115,6,119,1,119,6,123,1,123,10,127,1,127,13,131,1,131,2,135,1,135,5,0,99,2,14,0,0}
//var mem = []int{1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,6,19,1,19,6,23,2,23,6,27,2,6,27,31,2,13,31,35,1,9,35,39,2,10,39,43,1,6,43,47,1,13,47,51,2,6,51,55,2,55,6,59,1,59,5,63,2,9,63,67,1,5,67,71,2,10,71,75,1,6,75,79,1,79,5,83,2,83,10,87,1,9,87,91,1,5,91,95,1,95,6,99,2,10,99,103,1,5,103,107,1,107,6,111,1,5,111,115,2,115,6,119,1,119,6,123,1,123,10,127,1,127,13,131,1,131,2,135,1,135,5,0,99,2,14,0,0}
//var mem = []int{3,9,8,9,10,9,4,9,99,-1,8}
//var mem = []int{3,9,7,9,10,9,4,9,99,-1,8}
//var mem = []int{3,3,1108,-1,8,3,4,3,99}
//var mem = []int{3,3,1107,-1,8,3,4,3,99}
//var mem = []int {3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9}
//var mem = []int{3,3,1105,-1,9,1101,0,0,12,4,12,99,1}
//var mem = []int{3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
//	1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
//	999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99}
var mem = []int{3,225,1,225,6,6,1100,1,238,225,104,0,1102,67,92,225,1101,14,84,225,1002,217,69,224,101,-5175,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1,214,95,224,101,-127,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1101,8,41,225,2,17,91,224,1001,224,-518,224,4,224,1002,223,8,223,101,2,224,224,1,223,224,223,1101,37,27,225,1101,61,11,225,101,44,66,224,101,-85,224,224,4,224,1002,223,8,223,101,6,224,224,1,224,223,223,1102,7,32,224,101,-224,224,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,1001,14,82,224,101,-174,224,224,4,224,102,8,223,223,101,7,224,224,1,223,224,223,102,65,210,224,101,-5525,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,81,9,224,101,-90,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1101,71,85,225,1102,61,66,225,1102,75,53,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,8,226,226,224,102,2,223,223,1005,224,329,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,344,101,1,223,223,1007,226,677,224,102,2,223,223,1005,224,359,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,374,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,389,1001,223,1,223,108,226,677,224,102,2,223,223,1006,224,404,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,419,101,1,223,223,1008,677,677,224,102,2,223,223,1005,224,434,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,449,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,464,1001,223,1,223,107,226,677,224,1002,223,2,223,1006,224,479,1001,223,1,223,107,677,677,224,102,2,223,223,1005,224,494,1001,223,1,223,1008,226,677,224,102,2,223,223,1006,224,509,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,524,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,569,1001,223,1,223,7,226,677,224,102,2,223,223,1006,224,584,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,599,101,1,223,223,1107,677,677,224,1002,223,2,223,1005,224,614,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,629,1001,223,1,223,7,226,226,224,1002,223,2,223,1006,224,644,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,659,101,1,223,223,1107,226,677,224,1002,223,2,223,1006,224,674,101,1,223,223,4,223,99,226}

type instruction struct {
	opCode       int
	paramOneMode int
	paramTwoMode int
	len int
}

func newInstruction(o int) instruction {
	var opCode int
	var paramOneMode int
	var paramTwoMode int

	if o > 999 {
		paramTwoMode = 1
	}

	if (o - (1000 * paramTwoMode)) > 99 {
		paramOneMode = 1
	}

	opCode = o % 100

	return instruction{
		opCode:       opCode,
		paramOneMode: paramOneMode,
		paramTwoMode: paramTwoMode,
		len: insLen(opCode),
	}
}

func insLen(opCode int) int {
	switch opCode {
	case 1, 2, 7, 8:
		return 4
	case 3,4:
		return 2
	case 5,6:
		return 3
	default:
		return 1
	}
}

func main() {
	//fmt.Println(mem)
	for mem[ip] != cancel {
		//	fmt.Printf("ip: %d\n", ip)
		ins := newInstruction(mem[ip])
		//	fmt.Printf("instruction: %v\n", mem[ip:(ip+len)])
		process(ins)
		if ins.opCode != jumpIfTrue && ins.opCode != jumpIfFalse {
			ip += ins.len
		}
	}
}

func process(ins instruction) {
	switch ins.opCode {
	case add:
		val1 := getValue(ins.paramOneMode, mem[ip+1])
		val2 := getValue(ins.paramTwoMode, mem[ip+2])
		dst := getValue(positionMode, ip+3)
		sum := val1 + val2
		mem[dst] = sum
	case mul:
		val1 := getValue(ins.paramOneMode, mem[ip+1])
		val2 := getValue(ins.paramTwoMode, mem[ip+2])
		dst := getValue(positionMode, ip+3)
		prod := val1 * val2
		mem[dst] = prod
	case read:
		reader := bufio.NewReader(os.Stdin)
		fmt.Print("Enter text: ")
		input, _ := reader.ReadString('\n')
		val, _ := strconv.Atoi(strings.Trim(input, "\n"))
		mem[mem[ip+1]] = val
	case output:
		fmt.Println(getValue(ins.paramOneMode, mem[ip+1]))
	case jumpIfTrue:
		if getValue(ins.paramOneMode, mem[ip+1]) != 0 {
			ip = getValue(ins.paramTwoMode, mem[ip+2])
		} else {
			ip += ins.len
		}
	case jumpIfFalse:
		if getValue(ins.paramOneMode, mem[ip+1]) == 0 {
			ip = getValue(ins.paramTwoMode, mem[ip+2])
		} else {
			ip += ins.len
		}
	case lessThan:
		val1 := getValue(ins.paramOneMode, mem[ip+1])
		val2 := getValue(ins.paramTwoMode, mem[ip+2])
		dst := getValue(positionMode, ip+3)
		if val1 < val2{
			mem[dst] = 1
 		} else {
 			mem[dst] = 0
		}
	case equals:
		val1 := getValue(ins.paramOneMode, mem[ip+1])
		val2 := getValue(ins.paramTwoMode, mem[ip+2])
		dst := getValue(positionMode, ip+3)
		if val1 == val2{
			mem[dst] = 1
		} else {
			mem[dst] = 0
		}
	}
}

func getValue(mode, param int) int {
	switch mode {
	case positionMode:
		return mem[param]
	case immediateMode:
		return param
	}

	return 0
}
